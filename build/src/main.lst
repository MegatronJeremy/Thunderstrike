GAS LISTING /tmp/cc1zMmI6.s 			page 1


   1              		.file	"main.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   8              	_ZZ4mainENUlPvE_4_FUNES_:
   9              	.LFB96:
  10              		.file 1 "src/main.cpp"
   1:src/main.cpp  **** #include "../h/TCB.h"
   2:src/main.cpp  **** #include "../h/Riscv.h"
   3:src/main.cpp  **** #include "../h/TimerInterrupt.h"
   4:src/main.cpp  **** #include "../h/SysPrint.h"
   5:src/main.cpp  **** #include "../h/Scheduler.h"
   6:src/main.cpp  **** #include "../h/ThreadCollector.h"
   7:src/main.cpp  **** #include "../h/IdleThread.h"
   8:src/main.cpp  **** 
   9:src/main.cpp  **** extern void userMain();
  10:src/main.cpp  **** 
  11:src/main.cpp  **** int main() {
  12:src/main.cpp  ****     kprintString("Starting main\n");
  13:src/main.cpp  ****     TCB *main = TCB::createThread(nullptr, nullptr);
  14:src/main.cpp  ****     kprintString("Created main thread\n");
  15:src/main.cpp  ****     TCB::running = main;
  16:src/main.cpp  **** 
  17:src/main.cpp  ****     TCB *uMain = TCB::createThread([](void *){userMain();}, nullptr);
  11              		.loc 1 17 36
  12              		.cfi_startproc
  13 0000 130101FF 		addi	sp,sp,-16
  14              		.cfi_def_cfa_offset 16
  15 0004 23341100 		sd	ra,8(sp)
  16 0008 23308100 		sd	s0,0(sp)
  17              		.cfi_offset 1, -8
  18              		.cfi_offset 8, -16
  19 000c 13040101 		addi	s0,sp,16
  20              		.cfi_def_cfa 8, 0
  21              	.LVL0:
  22              	.LBB18:
  23              	.LBB19:
  24              		.loc 1 17 47
  25              		.loc 1 17 55 is_stmt 0
  26 0010 97000000 		call	_Z8userMainv@plt
  26      E7800000 
  27              	.LVL1:
  28              	.LBE19:
  29              	.LBE18:
  30              		.loc 1 17 58
  31 0018 83308100 		ld	ra,8(sp)
  32              		.cfi_restore 1
  33 001c 03340100 		ld	s0,0(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0020 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 0024 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE96:
GAS LISTING /tmp/cc1zMmI6.s 			page 2


  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
  45 0000 53746172 		.string	"Starting main\n"
  45      74696E67 
  45      206D6169 
  45      6E0A00
  46 000f 00       		.align	3
  47              	.LC1:
  48 0010 43726561 		.string	"Created main thread\n"
  48      74656420 
  48      6D61696E 
  48      20746872 
  48      6561640A 
  49 0025 000000   		.align	3
  50              	.LC2:
  51 0028 43726561 		.string	"Created user main thread\n"
  51      74656420 
  51      75736572 
  51      206D6169 
  51      6E207468 
  52 0042 00000000 		.align	3
  52      0000
  53              	.LC3:
  54 0048 4D61696E 		.string	"Main finished\n"
  54      2066696E 
  54      69736865 
  54      640A00
  55              		.text
  56              		.align	2
  57              		.globl	main
  59              	main:
  60              	.LFB94:
  11:src/main.cpp  ****     kprintString("Starting main\n");
  61              		.loc 1 11 12 is_stmt 1
  62              		.cfi_startproc
  63 0028 130101FE 		addi	sp,sp,-32
  64              		.cfi_def_cfa_offset 32
  65 002c 233C1100 		sd	ra,24(sp)
  66 0030 23388100 		sd	s0,16(sp)
  67 0034 23349100 		sd	s1,8(sp)
  68              		.cfi_offset 1, -8
  69              		.cfi_offset 8, -16
  70              		.cfi_offset 9, -24
  71 0038 13040102 		addi	s0,sp,32
  72              		.cfi_def_cfa 8, 0
  12:src/main.cpp  ****     TCB *main = TCB::createThread(nullptr, nullptr);
  73              		.loc 1 12 5
  12:src/main.cpp  ****     TCB *main = TCB::createThread(nullptr, nullptr);
  74              		.loc 1 12 17 is_stmt 0
  75 003c 17050000 		lla	a0,.LC0
  75      13050500 
  76 0044 97000000 		call	_Z12kprintStringPKc@plt
  76      E7800000 
  77              	.LVL2:
  13:src/main.cpp  ****     kprintString("Created main thread\n");
  78              		.loc 1 13 5 is_stmt 1
GAS LISTING /tmp/cc1zMmI6.s 			page 3


  13:src/main.cpp  ****     kprintString("Created main thread\n");
  79              		.loc 1 13 34 is_stmt 0
  80 004c 93050000 		li	a1,0
  81 0050 13050000 		li	a0,0
  82 0054 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
  82      E7800000 
  83              	.LVL3:
  84 005c 93040500 		mv	s1,a0
  85              	.LVL4:
  14:src/main.cpp  ****     TCB::running = main;
  86              		.loc 1 14 5 is_stmt 1
  14:src/main.cpp  ****     TCB::running = main;
  87              		.loc 1 14 17 is_stmt 0
  88 0060 17050000 		lla	a0,.LC1
  88      13050500 
  89 0068 97000000 		call	_Z12kprintStringPKc@plt
  89      E7800000 
  90              	.LVL5:
  15:src/main.cpp  **** 
  91              		.loc 1 15 5 is_stmt 1
  15:src/main.cpp  **** 
  92              		.loc 1 15 18 is_stmt 0
  93 0070 97070000 		la	a5,_ZN3TCB7runningE
  93      83B70700 
  94 0078 23B09700 		sd	s1,0(a5)
  95              		.loc 1 17 5 is_stmt 1
  96              	.LVL6:
  97              		.loc 1 17 35 is_stmt 0
  98 007c 93050000 		li	a1,0
  99 0080 17050000 		lla	a0,_ZZ4mainENUlPvE_4_FUNES_
  99      13050500 
 100 0088 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 100      E7800000 
 101              	.LVL7:
 102 0090 93040500 		mv	s1,a0
 103              	.LVL8:
  18:src/main.cpp  ****     kprintString("Created user main thread\n");
 104              		.loc 1 18 5 is_stmt 1
 105              		.loc 1 18 17 is_stmt 0
 106 0094 17050000 		lla	a0,.LC2
 106      13050500 
 107 009c 97000000 		call	_Z12kprintStringPKc@plt
 107      E7800000 
 108              	.LVL9:
  19:src/main.cpp  **** 
  20:src/main.cpp  ****     Riscv::w_stvec((uint64) &Riscv::supervisorTrap);
 109              		.loc 1 20 5 is_stmt 1
 110              		.loc 1 20 19 is_stmt 0
 111 00a4 97070000 		la	a5,_ZN5Riscv14supervisorTrapEv
 111      83B70700 
 112              	.LVL10:
 113              	.LBB20:
 114              	.LBB21:
 115              		.file 2 "src/../h/Riscv.h"
   1:src/../h/Riscv.h **** //
   2:src/../h/Riscv.h **** // Created by xparh on 4/24/2022.
   3:src/../h/Riscv.h **** //
GAS LISTING /tmp/cc1zMmI6.s 			page 4


   4:src/../h/Riscv.h **** 
   5:src/../h/Riscv.h **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_H
   6:src/../h/Riscv.h **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_RISCV_H
   7:src/../h/Riscv.h **** 
   8:src/../h/Riscv.h **** #include "../lib/hw.h"
   9:src/../h/Riscv.h **** 
  10:src/../h/Riscv.h **** #define lock()                  \
  11:src/../h/Riscv.h ****     volatile uint64 sstatus = Riscv::r_sstatus(); \
  12:src/../h/Riscv.h ****     Riscv::disableInterrupts(); \
  13:src/../h/Riscv.h **** 
  14:src/../h/Riscv.h **** #define unlock()                \
  15:src/../h/Riscv.h ****     Riscv::w_sstatus(sstatus);  \
  16:src/../h/Riscv.h **** 
  17:src/../h/Riscv.h **** 
  18:src/../h/Riscv.h **** class Riscv {
  19:src/../h/Riscv.h **** public:
  20:src/../h/Riscv.h **** 
  21:src/../h/Riscv.h ****     // disables interrupts
  22:src/../h/Riscv.h ****     static void disableInterrupts();
  23:src/../h/Riscv.h **** 
  24:src/../h/Riscv.h ****     // enables interrupts
  25:src/../h/Riscv.h ****     static void enableInterrupts();
  26:src/../h/Riscv.h **** 
  27:src/../h/Riscv.h ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  28:src/../h/Riscv.h ****     static void popSppSpie(bool prMode);
  29:src/../h/Riscv.h **** 
  30:src/../h/Riscv.h ****     // push x3..x31 registers on stack
  31:src/../h/Riscv.h **** //    static void pushRegisters();
  32:src/../h/Riscv.h **** 
  33:src/../h/Riscv.h ****     // pop x3..x31 registers on stack
  34:src/../h/Riscv.h **** //    static void popRegisters();
  35:src/../h/Riscv.h **** 
  36:src/../h/Riscv.h ****     // push a0 on saved contex
  37:src/../h/Riscv.h ****     static void pushRegisterA0(uint64 context);
  38:src/../h/Riscv.h **** 
  39:src/../h/Riscv.h ****     // push a1 on saved contex
  40:src/../h/Riscv.h ****     static void pushRegisterA1(uint64 context);
  41:src/../h/Riscv.h **** 
  42:src/../h/Riscv.h ****     // read register sp
  43:src/../h/Riscv.h ****     static uint64 r_sp();
  44:src/../h/Riscv.h **** 
  45:src/../h/Riscv.h ****     // write register sp
  46:src/../h/Riscv.h ****     static void w_sp(uint64 sp);
  47:src/../h/Riscv.h **** 
  48:src/../h/Riscv.h ****     // read old frame pointer
  49:src/../h/Riscv.h ****     static uint64 r_ps0();
  50:src/../h/Riscv.h **** 
  51:src/../h/Riscv.h ****     // read frame pointer
  52:src/../h/Riscv.h ****     static uint64 r_s0();
  53:src/../h/Riscv.h **** 
  54:src/../h/Riscv.h ****     // read register a0
  55:src/../h/Riscv.h ****     static uint64 r_a0();
  56:src/../h/Riscv.h **** 
  57:src/../h/Riscv.h ****     // write register a0
  58:src/../h/Riscv.h ****     static void w_a0(uint64 a0);
  59:src/../h/Riscv.h **** 
  60:src/../h/Riscv.h ****     // read register a1
GAS LISTING /tmp/cc1zMmI6.s 			page 5


  61:src/../h/Riscv.h ****     static uint64 r_a1();
  62:src/../h/Riscv.h **** 
  63:src/../h/Riscv.h ****     // write register a1
  64:src/../h/Riscv.h ****     static void w_a1(uint64 a1);
  65:src/../h/Riscv.h **** 
  66:src/../h/Riscv.h ****     // read register a2
  67:src/../h/Riscv.h ****     static uint64 r_a2();
  68:src/../h/Riscv.h **** 
  69:src/../h/Riscv.h ****     // write register a2
  70:src/../h/Riscv.h ****     static void w_a2(uint64 a2);
  71:src/../h/Riscv.h **** 
  72:src/../h/Riscv.h ****     // read register scause
  73:src/../h/Riscv.h ****     static uint64 r_scause();
  74:src/../h/Riscv.h **** 
  75:src/../h/Riscv.h ****     // write register scause
  76:src/../h/Riscv.h ****     static void w_scause(uint64 scause);
  77:src/../h/Riscv.h **** 
  78:src/../h/Riscv.h ****     // read register sepc
  79:src/../h/Riscv.h ****     static uint64 r_sepc();
  80:src/../h/Riscv.h **** 
  81:src/../h/Riscv.h ****     // write register sepc
  82:src/../h/Riscv.h ****     static void w_sepc(uint64 sepc);
  83:src/../h/Riscv.h **** 
  84:src/../h/Riscv.h ****     // read register stvec
  85:src/../h/Riscv.h ****     static uint64 r_stvec();
  86:src/../h/Riscv.h **** 
  87:src/../h/Riscv.h ****     // write register stvec
  88:src/../h/Riscv.h ****     static void w_stvec(uint64 stvec);
  89:src/../h/Riscv.h **** 
  90:src/../h/Riscv.h ****     // read register stval
  91:src/../h/Riscv.h ****     static uint64 r_stval();
  92:src/../h/Riscv.h **** 
  93:src/../h/Riscv.h ****     // write register stval
  94:src/../h/Riscv.h ****     static void w_stval(uint64 stval);
  95:src/../h/Riscv.h **** 
  96:src/../h/Riscv.h ****     enum BitMaskSip {
  97:src/../h/Riscv.h ****         SIP_SSIP = (1 << 1),
  98:src/../h/Riscv.h ****         SIP_STIP = (1 << 5),
  99:src/../h/Riscv.h ****         SIP_SEIP = (1 << 9)
 100:src/../h/Riscv.h ****     };
 101:src/../h/Riscv.h **** 
 102:src/../h/Riscv.h ****     // mask set register sip
 103:src/../h/Riscv.h ****     static void ms_sip(uint64 mask);
 104:src/../h/Riscv.h **** 
 105:src/../h/Riscv.h ****     // mask clear register sip
 106:src/../h/Riscv.h ****     static void mc_sip(uint64 mask);
 107:src/../h/Riscv.h **** 
 108:src/../h/Riscv.h ****     // read register sip
 109:src/../h/Riscv.h ****     static uint64 r_sip();
 110:src/../h/Riscv.h **** 
 111:src/../h/Riscv.h ****     // write register sip
 112:src/../h/Riscv.h ****     static void w_sip(uint64 sip);
 113:src/../h/Riscv.h **** 
 114:src/../h/Riscv.h ****     enum BitMaskSstatus {
 115:src/../h/Riscv.h ****         SSTATUS_SIE = (1 << 1),
 116:src/../h/Riscv.h ****         SSTATUS_SPIE = (1 << 5),
 117:src/../h/Riscv.h ****         SSTATUS_SPP = (1 << 8)
GAS LISTING /tmp/cc1zMmI6.s 			page 6


 118:src/../h/Riscv.h ****     };
 119:src/../h/Riscv.h **** 
 120:src/../h/Riscv.h ****     // mask set register sstatus
 121:src/../h/Riscv.h ****     static void ms_sstatus(uint64 mask);
 122:src/../h/Riscv.h **** 
 123:src/../h/Riscv.h ****     // mask clear register sstatus
 124:src/../h/Riscv.h ****     static void mc_sstatus(uint64 mask);
 125:src/../h/Riscv.h **** 
 126:src/../h/Riscv.h ****     // read register sstatus
 127:src/../h/Riscv.h ****     static uint64 r_sstatus();
 128:src/../h/Riscv.h **** 
 129:src/../h/Riscv.h ****     // write register sstatus
 130:src/../h/Riscv.h ****     static void w_sstatus(uint64 sstatus);
 131:src/../h/Riscv.h **** 
 132:src/../h/Riscv.h ****     // supervisor trap
 133:src/../h/Riscv.h ****     static void supervisorTrap();
 134:src/../h/Riscv.h **** 
 135:src/../h/Riscv.h **** private:
 136:src/../h/Riscv.h ****     // supervisor trap handler
 137:src/../h/Riscv.h ****     static void handleSupervisorTrap();
 138:src/../h/Riscv.h **** };
 139:src/../h/Riscv.h **** 
 140:src/../h/Riscv.h **** 
 141:src/../h/Riscv.h **** inline uint64 Riscv::r_sp() {
 142:src/../h/Riscv.h ****     uint64 volatile sp;
 143:src/../h/Riscv.h ****     __asm__ volatile ("mv %[sp], sp" : [sp] "=r"(sp));
 144:src/../h/Riscv.h ****     return sp;
 145:src/../h/Riscv.h **** }
 146:src/../h/Riscv.h **** 
 147:src/../h/Riscv.h **** inline void Riscv::w_sp(uint64 sp) {
 148:src/../h/Riscv.h ****     __asm__ volatile ("mv sp, %[sp]" : : [sp] "r"(sp));
 149:src/../h/Riscv.h **** }
 150:src/../h/Riscv.h **** 
 151:src/../h/Riscv.h **** inline uint64 Riscv::r_ps0() {
 152:src/../h/Riscv.h ****     uint64 volatile ps0, s0 = r_s0() - 8;
 153:src/../h/Riscv.h ****     __asm__ volatile ("mv %[ps0], %[s0]" : [ps0] "=r"(ps0) : [s0] "r"(s0));
 154:src/../h/Riscv.h ****     return ps0;
 155:src/../h/Riscv.h **** }
 156:src/../h/Riscv.h **** 
 157:src/../h/Riscv.h **** inline uint64 Riscv::r_s0() {
 158:src/../h/Riscv.h ****     uint64 volatile s0;
 159:src/../h/Riscv.h ****     __asm__ volatile ("mv %[s0], s0" : [s0] "=r"(s0));
 160:src/../h/Riscv.h ****     return s0;
 161:src/../h/Riscv.h **** }
 162:src/../h/Riscv.h **** 
 163:src/../h/Riscv.h **** inline uint64 Riscv::r_a0() {
 164:src/../h/Riscv.h ****     uint64 volatile a0;
 165:src/../h/Riscv.h ****     __asm__ volatile ("mv %[a0], a0" : [a0] "=r"(a0));
 166:src/../h/Riscv.h ****     return a0;
 167:src/../h/Riscv.h **** }
 168:src/../h/Riscv.h **** 
 169:src/../h/Riscv.h **** inline void Riscv::w_a0(uint64 a0) {
 170:src/../h/Riscv.h ****     __asm__ volatile ("mv a0, %[a0]" : : [a0] "r"(a0));
 171:src/../h/Riscv.h **** }
 172:src/../h/Riscv.h **** 
 173:src/../h/Riscv.h **** inline uint64 Riscv::r_a1() {
 174:src/../h/Riscv.h ****     uint64 volatile a1;
GAS LISTING /tmp/cc1zMmI6.s 			page 7


 175:src/../h/Riscv.h ****     __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(a1));
 176:src/../h/Riscv.h ****     return a1;
 177:src/../h/Riscv.h **** }
 178:src/../h/Riscv.h **** 
 179:src/../h/Riscv.h **** inline void Riscv::w_a1(uint64 a1) {
 180:src/../h/Riscv.h ****     __asm__ volatile ("mv a1, %[a1]" : : [a1] "r"(a1));
 181:src/../h/Riscv.h **** }
 182:src/../h/Riscv.h **** 
 183:src/../h/Riscv.h **** inline uint64 Riscv::r_a2() {
 184:src/../h/Riscv.h ****     uint64 volatile a2;
 185:src/../h/Riscv.h ****     __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 186:src/../h/Riscv.h ****     return a2;
 187:src/../h/Riscv.h **** }
 188:src/../h/Riscv.h **** 
 189:src/../h/Riscv.h **** inline void Riscv::w_a2(uint64 a2) {
 190:src/../h/Riscv.h ****     __asm__ volatile ("mv a2, %[a2]" : : [a2] "r"(a2));
 191:src/../h/Riscv.h **** }
 192:src/../h/Riscv.h **** 
 193:src/../h/Riscv.h **** inline uint64 Riscv::r_scause() {
 194:src/../h/Riscv.h ****     uint64 volatile scause;
 195:src/../h/Riscv.h ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
 196:src/../h/Riscv.h ****     return scause;
 197:src/../h/Riscv.h **** }
 198:src/../h/Riscv.h **** 
 199:src/../h/Riscv.h **** inline void Riscv::w_scause(uint64 scause) {
 200:src/../h/Riscv.h ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 201:src/../h/Riscv.h **** }
 202:src/../h/Riscv.h **** 
 203:src/../h/Riscv.h **** inline uint64 Riscv::r_sepc() {
 204:src/../h/Riscv.h ****     uint64 volatile sepc;
 205:src/../h/Riscv.h ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 206:src/../h/Riscv.h ****     return sepc;
 207:src/../h/Riscv.h **** }
 208:src/../h/Riscv.h **** 
 209:src/../h/Riscv.h **** inline void Riscv::w_sepc(uint64 sepc) {
 210:src/../h/Riscv.h ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 211:src/../h/Riscv.h **** }
 212:src/../h/Riscv.h **** 
 213:src/../h/Riscv.h **** inline uint64 Riscv::r_stvec() {
 214:src/../h/Riscv.h ****     uint64 volatile stvec;
 215:src/../h/Riscv.h ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 216:src/../h/Riscv.h ****     return stvec;
 217:src/../h/Riscv.h **** }
 218:src/../h/Riscv.h **** 
 219:src/../h/Riscv.h **** inline void Riscv::w_stvec(uint64 stvec) {
 220:src/../h/Riscv.h ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 116              		.loc 2 220 5 is_stmt 1
 117              		.loc 2 220 69 is_stmt 0
 118              	#APP
 119              	# 220 "src/../h/Riscv.h" 1
 221              	}
 120              		csrw stvec, a5
 121              	# 0 "" 2
 122              	.LVL11:
 123              	#NO_APP
 124              	.LBE21:
 125              	.LBE20:
GAS LISTING /tmp/cc1zMmI6.s 			page 8


  21:src/main.cpp  **** 
  22:src/main.cpp  ****     uMain->join();
 126              		.loc 1 22 5 is_stmt 1
 127              		.loc 1 22 16 is_stmt 0
 128 00b0 13850400 		mv	a0,s1
 129 00b4 97000000 		call	_ZN3TCB4joinEv@plt
 129      E7800000 
 130              	.LVL12:
  23:src/main.cpp  ****     TCB::yield();
 131              		.loc 1 23 5 is_stmt 1
 132              	.LBB22:
 133              	.LBB23:
 134              		.file 3 "src/../h/TCB.h"
   1:src/../h/TCB.h **** //
   2:src/../h/TCB.h **** // Created by xparh on 4/24/2022.
   3:src/../h/TCB.h **** //
   4:src/../h/TCB.h **** 
   5:src/../h/TCB.h **** #ifndef OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_TCB_H
   6:src/../h/TCB.h **** #define OS1_VEZBE07_RISCV_CONTEXT_SWITCH_1_SYNCHRONOUS_TCB_H
   7:src/../h/TCB.h **** 
   8:src/../h/TCB.h **** #include "../lib/hw.h"
   9:src/../h/TCB.h **** #include "KernelObject.h"
  10:src/../h/TCB.h **** #include "List.h"
  11:src/../h/TCB.h **** #include "Mutex.h"
  12:src/../h/TCB.h **** #include "ThreadNode.h"
  13:src/../h/TCB.h **** #include "ThreadList.h"
  14:src/../h/TCB.h **** 
  15:src/../h/TCB.h **** // Thread Control Block
  16:src/../h/TCB.h **** class TCB : public KernelObject {
  17:src/../h/TCB.h **** public:
  18:src/../h/TCB.h ****     using Body = void (*)(void *);
  19:src/../h/TCB.h **** 
  20:src/../h/TCB.h ****     explicit TCB(Body body, void *args, uint64 timeSlice, bool privileged = false);
  21:src/../h/TCB.h **** 
  22:src/../h/TCB.h ****     static uint64 offsSP;
  23:src/../h/TCB.h **** 
  24:src/../h/TCB.h ****     bool isBlocked() const {
  25:src/../h/TCB.h ****         return status == BLOCKED;
  26:src/../h/TCB.h ****     }
  27:src/../h/TCB.h **** 
  28:src/../h/TCB.h ****     void setBlocked() {
  29:src/../h/TCB.h ****         status = BLOCKED;
  30:src/../h/TCB.h ****     }
  31:src/../h/TCB.h **** 
  32:src/../h/TCB.h ****     bool isReady() const {
  33:src/../h/TCB.h ****         return status == READY;
  34:src/../h/TCB.h ****     }
  35:src/../h/TCB.h **** 
  36:src/../h/TCB.h ****     void setReady() {
  37:src/../h/TCB.h ****         status = READY;
  38:src/../h/TCB.h ****     }
  39:src/../h/TCB.h **** 
  40:src/../h/TCB.h ****     bool isFinished() const {
  41:src/../h/TCB.h ****         return status == FINISHED;
  42:src/../h/TCB.h ****     }
  43:src/../h/TCB.h **** 
  44:src/../h/TCB.h ****     void setFinished() {
GAS LISTING /tmp/cc1zMmI6.s 			page 9


  45:src/../h/TCB.h ****         status = FINISHED;
  46:src/../h/TCB.h ****     }
  47:src/../h/TCB.h **** 
  48:src/../h/TCB.h ****     bool isIdle() const {
  49:src/../h/TCB.h ****         return status == IDLE;
  50:src/../h/TCB.h ****     }
  51:src/../h/TCB.h **** 
  52:src/../h/TCB.h ****     void setIdle() {
  53:src/../h/TCB.h ****         status = IDLE;
  54:src/../h/TCB.h ****     }
  55:src/../h/TCB.h **** 
  56:src/../h/TCB.h ****     uint64 getTimeSlice() const {
  57:src/../h/TCB.h ****         return timeSlice;
  58:src/../h/TCB.h ****     }
  59:src/../h/TCB.h **** 
  60:src/../h/TCB.h ****     time_t getBlockedTime() const {
  61:src/../h/TCB.h ****         return blockedTime;
  62:src/../h/TCB.h ****     }
  63:src/../h/TCB.h **** 
  64:src/../h/TCB.h ****     void setBlockedTime(time_t blockedTime) {
  65:src/../h/TCB.h ****         this->blockedTime = blockedTime;
  66:src/../h/TCB.h ****     }
  67:src/../h/TCB.h **** 
  68:src/../h/TCB.h ****     void decBlockedTime(time_t time = 1) {
  69:src/../h/TCB.h ****         this->blockedTime -= time;
  70:src/../h/TCB.h ****     }
  71:src/../h/TCB.h **** 
  72:src/../h/TCB.h ****     const Mutex *getMutex() const {
  73:src/../h/TCB.h ****         return &mutex;
  74:src/../h/TCB.h ****     }
  75:src/../h/TCB.h **** 
  76:src/../h/TCB.h ****     uint64 getSsp() const {
  77:src/../h/TCB.h ****         return ssp;
  78:src/../h/TCB.h ****     }
  79:src/../h/TCB.h **** 
  80:src/../h/TCB.h ****     uint64 getSavedContext() const {
  81:src/../h/TCB.h ****         return (uint64) (kernelStack + DEFAULT_STACK_SIZE - 32);
  82:src/../h/TCB.h ****     }
  83:src/../h/TCB.h **** 
  84:src/../h/TCB.h ****     uint64 *getThreadStack() const {
  85:src/../h/TCB.h ****         return threadStack;
  86:src/../h/TCB.h ****     };
  87:src/../h/TCB.h **** 
  88:src/../h/TCB.h ****     ThreadNode *getNode() {
  89:src/../h/TCB.h ****         return &node;
  90:src/../h/TCB.h ****     }
  91:src/../h/TCB.h **** 
  92:src/../h/TCB.h ****     int join();
  93:src/../h/TCB.h **** 
  94:src/../h/TCB.h ****     static TCB *createThread(Body body, void *args);
  95:src/../h/TCB.h **** 
  96:src/../h/TCB.h ****     static void yield() {
  97:src/../h/TCB.h ****         __asm__ volatile ("ecall");
 135              		.loc 3 97 9
 136              		.loc 3 97 35 is_stmt 0
 137              	#APP
 138              	# 97 "src/../h/TCB.h" 1
GAS LISTING /tmp/cc1zMmI6.s 			page 10


  98              	    }
 139              		ecall
 140              	# 0 "" 2
 141              	#NO_APP
 142              	.LBE23:
 143              	.LBE22:
  24:src/main.cpp  **** 
  25:src/main.cpp  ****     delete ThreadCollector::getInstance();
 144              		.loc 1 25 5 is_stmt 1
 145              		.loc 1 25 40 is_stmt 0
 146 00c0 97000000 		call	_ZN15ThreadCollector11getInstanceEv@plt
 146      E7800000 
 147              	.LVL13:
 148              		.loc 1 25 42
 149 00c8 630E0500 		beqz	a0,.L4
 150 00cc 93040500 		mv	s1,a0
 151              	.LVL14:
 152              		.loc 1 25 41 discriminator 1
 153 00d0 97000000 		call	_ZN15ThreadCollectorD1Ev@plt
 153      E7800000 
 154              	.LVL15:
 155              	.LBB24:
 156              	.LBB25:
 157              		.file 4 "src/../h/KernelObject.h"
   1:src/../h/KernelObject.h **** //
   2:src/../h/KernelObject.h **** // Created by xparh on 5/10/2022.
   3:src/../h/KernelObject.h **** //
   4:src/../h/KernelObject.h **** 
   5:src/../h/KernelObject.h **** #ifndef OS_PROJEKAT_KERNELOBJECT_H
   6:src/../h/KernelObject.h **** #define OS_PROJEKAT_KERNELOBJECT_H
   7:src/../h/KernelObject.h **** 
   8:src/../h/KernelObject.h **** #include "MemoryAllocator.h"
   9:src/../h/KernelObject.h **** 
  10:src/../h/KernelObject.h **** class KernelObject {
  11:src/../h/KernelObject.h **** public:
  12:src/../h/KernelObject.h ****     static void *operator new(size_t size) {
  13:src/../h/KernelObject.h ****         return kmalloc(size);
  14:src/../h/KernelObject.h ****     }
  15:src/../h/KernelObject.h **** 
  16:src/../h/KernelObject.h ****     static void *operator new[](size_t size) {
  17:src/../h/KernelObject.h ****         return kmalloc(size);
  18:src/../h/KernelObject.h ****     }
  19:src/../h/KernelObject.h **** 
  20:src/../h/KernelObject.h ****     static void operator delete(void *addr) {
  21:src/../h/KernelObject.h ****         kfree(addr);
 158              		.loc 4 21 9 is_stmt 1 discriminator 1
 159              		.loc 4 21 14 is_stmt 0 discriminator 1
 160 00d8 13850400 		mv	a0,s1
 161 00dc 97000000 		call	_Z5kfreePv@plt
 161      E7800000 
 162              	.LVL16:
 163              	.L4:
 164              	.LBE25:
 165              	.LBE24:
  26:src/main.cpp  ****     delete IdleThread::getInstance();
 166              		.loc 1 26 5 is_stmt 1
 167              		.loc 1 26 35 is_stmt 0
GAS LISTING /tmp/cc1zMmI6.s 			page 11


 168 00e4 97000000 		call	_ZN10IdleThread11getInstanceEv@plt
 168      E7800000 
 169              	.LVL17:
 170 00ec 93040500 		mv	s1,a0
 171              		.loc 1 26 37
 172 00f0 630C0500 		beqz	a0,.L5
 173              		.loc 1 26 36 discriminator 1
 174 00f4 97000000 		call	_ZN10IdleThreadD1Ev@plt
 174      E7800000 
 175              	.LVL18:
 176              	.LBB26:
 177              	.LBB27:
 178              		.loc 4 21 9 is_stmt 1 discriminator 1
 179              		.loc 4 21 14 is_stmt 0 discriminator 1
 180 00fc 13850400 		mv	a0,s1
 181 0100 97000000 		call	_Z5kfreePv@plt
 181      E7800000 
 182              	.LVL19:
 183              	.L5:
 184              	.LBE27:
 185              	.LBE26:
  27:src/main.cpp  ****     delete TimerInterrupt::getInstance();
 186              		.loc 1 27 5 is_stmt 1
 187              		.loc 1 27 39 is_stmt 0
 188 0108 97000000 		call	_ZN14TimerInterrupt11getInstanceEv@plt
 188      E7800000 
 189              	.LVL20:
 190 0110 93040500 		mv	s1,a0
 191              		.loc 1 27 41
 192 0114 630C0500 		beqz	a0,.L6
 193              		.loc 1 27 40 discriminator 1
 194 0118 97000000 		call	_ZN14TimerInterruptD1Ev@plt
 194      E7800000 
 195              	.LVL21:
 196              	.LBB28:
 197              	.LBB29:
 198              		.loc 4 21 9 is_stmt 1 discriminator 1
 199              		.loc 4 21 14 is_stmt 0 discriminator 1
 200 0120 13850400 		mv	a0,s1
 201 0124 97000000 		call	_Z5kfreePv@plt
 201      E7800000 
 202              	.LVL22:
 203              	.L6:
 204              	.LBE29:
 205              	.LBE28:
  28:src/main.cpp  ****     delete Scheduler::getInstance();
 206              		.loc 1 28 5 is_stmt 1
 207              		.loc 1 28 34 is_stmt 0
 208 012c 97000000 		call	_ZN9Scheduler11getInstanceEv@plt
 208      E7800000 
 209              	.LVL23:
 210 0134 93040500 		mv	s1,a0
 211              		.loc 1 28 36
 212 0138 630C0500 		beqz	a0,.L7
 213              		.loc 1 28 35 discriminator 1
 214 013c 97000000 		call	_ZN9SchedulerD1Ev@plt
 214      E7800000 
GAS LISTING /tmp/cc1zMmI6.s 			page 12


 215              	.LVL24:
 216              	.LBB30:
 217              	.LBB31:
 218              		.loc 4 21 9 is_stmt 1 discriminator 1
 219              		.loc 4 21 14 is_stmt 0 discriminator 1
 220 0144 13850400 		mv	a0,s1
 221 0148 97000000 		call	_Z5kfreePv@plt
 221      E7800000 
 222              	.LVL25:
 223              	.L7:
 224              	.LBE31:
 225              	.LBE30:
  29:src/main.cpp  **** 
  30:src/main.cpp  ****     kprintString("Main finished\n");
 226              		.loc 1 30 5 is_stmt 1
 227              		.loc 1 30 17 is_stmt 0
 228 0150 17050000 		lla	a0,.LC3
 228      13050500 
 229 0158 97000000 		call	_Z12kprintStringPKc@plt
 229      E7800000 
 230              	.LVL26:
  31:src/main.cpp  **** 
  32:src/main.cpp  ****     return 0;
 231              		.loc 1 32 5 is_stmt 1
  33:src/main.cpp  **** }
 232              		.loc 1 33 1 is_stmt 0
 233 0160 13050000 		li	a0,0
 234 0164 83308101 		ld	ra,24(sp)
 235              		.cfi_restore 1
 236 0168 03340101 		ld	s0,16(sp)
 237              		.cfi_restore 8
 238              		.cfi_def_cfa 2, 32
 239 016c 83348100 		ld	s1,8(sp)
 240              		.cfi_restore 9
 241 0170 13010102 		addi	sp,sp,32
 242              		.cfi_def_cfa_offset 0
 243 0174 67800000 		jr	ra
 244              		.cfi_endproc
 245              	.LFE94:
 247              	.Letext0:
 248              		.file 5 "src/../h/../lib/hw.h"
 249              		.file 6 "src/../h/Mutex.h"
 250              		.file 7 "src/../h/ThreadNode.h"
 251              		.file 8 "src/../h/ThreadList.h"
 252              		.file 9 "src/../h/KernelSemaphore.h"
 253              		.file 10 "src/../h/TimerInterrupt.h"
 254              		.file 11 "src/../h/Scheduler.h"
 255              		.file 12 "src/../h/ThreadCollector.h"
 256              		.file 13 "src/../h/IdleThread.h"
 257              		.file 14 "src/../h/MemoryAllocator.h"
 258              		.file 15 "src/../h/SysPrint.h"
GAS LISTING /tmp/cc1zMmI6.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
     /tmp/cc1zMmI6.s:8      .text:0000000000000000 _ZZ4mainENUlPvE_4_FUNES_
     /tmp/cc1zMmI6.s:12     .text:0000000000000000 .L0 
     /tmp/cc1zMmI6.s:13     .text:0000000000000000 .L0 
     /tmp/cc1zMmI6.s:14     .text:0000000000000004 .L0 
     /tmp/cc1zMmI6.s:17     .text:000000000000000c .L0 
     /tmp/cc1zMmI6.s:18     .text:000000000000000c .L0 
     /tmp/cc1zMmI6.s:20     .text:0000000000000010 .L0 
     /tmp/cc1zMmI6.s:25     .text:0000000000000010 .L0 
     /tmp/cc1zMmI6.s:26     .text:0000000000000010 .L0 
     /tmp/cc1zMmI6.s:31     .text:0000000000000018 .L0 
     /tmp/cc1zMmI6.s:32     .text:000000000000001c .L0 
     /tmp/cc1zMmI6.s:34     .text:0000000000000020 .L0 
     /tmp/cc1zMmI6.s:35     .text:0000000000000020 .L0 
     /tmp/cc1zMmI6.s:37     .text:0000000000000024 .L0 
     /tmp/cc1zMmI6.s:39     .text:0000000000000028 .L0 
     /tmp/cc1zMmI6.s:59     .text:0000000000000028 main
     /tmp/cc1zMmI6.s:62     .text:0000000000000028 .L0 
     /tmp/cc1zMmI6.s:63     .text:0000000000000028 .L0 
     /tmp/cc1zMmI6.s:64     .text:000000000000002c .L0 
     /tmp/cc1zMmI6.s:68     .text:0000000000000038 .L0 
     /tmp/cc1zMmI6.s:69     .text:0000000000000038 .L0 
     /tmp/cc1zMmI6.s:70     .text:0000000000000038 .L0 
     /tmp/cc1zMmI6.s:72     .text:000000000000003c .L0 
     /tmp/cc1zMmI6.s:74     .text:000000000000003c .L0 
     /tmp/cc1zMmI6.s:75     .text:000000000000003c .L0 
     /tmp/cc1zMmI6.s:79     .text:000000000000004c .L0 
     /tmp/cc1zMmI6.s:80     .text:000000000000004c .L0 
     /tmp/cc1zMmI6.s:87     .text:0000000000000060 .L0 
     /tmp/cc1zMmI6.s:88     .text:0000000000000060 .L0 
     /tmp/cc1zMmI6.s:92     .text:0000000000000070 .L0 
     /tmp/cc1zMmI6.s:93     .text:0000000000000070 .L0 
     /tmp/cc1zMmI6.s:97     .text:000000000000007c .L0 
     /tmp/cc1zMmI6.s:98     .text:000000000000007c .L0 
     /tmp/cc1zMmI6.s:105    .text:0000000000000094 .L0 
     /tmp/cc1zMmI6.s:106    .text:0000000000000094 .L0 
     /tmp/cc1zMmI6.s:110    .text:00000000000000a4 .L0 
     /tmp/cc1zMmI6.s:111    .text:00000000000000a4 .L0 
     /tmp/cc1zMmI6.s:117    .text:00000000000000ac .L0 
    src/../h/Riscv.h:220    .text:00000000000000ac .L0 
     /tmp/cc1zMmI6.s:127    .text:00000000000000b0 .L0 
     /tmp/cc1zMmI6.s:128    .text:00000000000000b0 .L0 
     /tmp/cc1zMmI6.s:135    .text:00000000000000bc .L0 
     /tmp/cc1zMmI6.s:136    .text:00000000000000bc .L0 
      src/../h/TCB.h:97     .text:00000000000000bc .L0 
     /tmp/cc1zMmI6.s:145    .text:00000000000000c0 .L0 
     /tmp/cc1zMmI6.s:146    .text:00000000000000c0 .L0 
     /tmp/cc1zMmI6.s:149    .text:00000000000000c8 .L0 
     /tmp/cc1zMmI6.s:153    .text:00000000000000d0 .L0 
     /tmp/cc1zMmI6.s:159    .text:00000000000000d8 .L0 
     /tmp/cc1zMmI6.s:160    .text:00000000000000d8 .L0 
     /tmp/cc1zMmI6.s:167    .text:00000000000000e4 .L0 
     /tmp/cc1zMmI6.s:168    .text:00000000000000e4 .L0 
     /tmp/cc1zMmI6.s:172    .text:00000000000000f0 .L0 
     /tmp/cc1zMmI6.s:174    .text:00000000000000f4 .L0 
     /tmp/cc1zMmI6.s:179    .text:00000000000000fc .L0 
GAS LISTING /tmp/cc1zMmI6.s 			page 14


     /tmp/cc1zMmI6.s:180    .text:00000000000000fc .L0 
     /tmp/cc1zMmI6.s:187    .text:0000000000000108 .L0 
     /tmp/cc1zMmI6.s:188    .text:0000000000000108 .L0 
     /tmp/cc1zMmI6.s:192    .text:0000000000000114 .L0 
     /tmp/cc1zMmI6.s:194    .text:0000000000000118 .L0 
     /tmp/cc1zMmI6.s:199    .text:0000000000000120 .L0 
     /tmp/cc1zMmI6.s:200    .text:0000000000000120 .L0 
     /tmp/cc1zMmI6.s:207    .text:000000000000012c .L0 
     /tmp/cc1zMmI6.s:208    .text:000000000000012c .L0 
     /tmp/cc1zMmI6.s:212    .text:0000000000000138 .L0 
     /tmp/cc1zMmI6.s:214    .text:000000000000013c .L0 
     /tmp/cc1zMmI6.s:219    .text:0000000000000144 .L0 
     /tmp/cc1zMmI6.s:220    .text:0000000000000144 .L0 
     /tmp/cc1zMmI6.s:227    .text:0000000000000150 .L0 
     /tmp/cc1zMmI6.s:228    .text:0000000000000150 .L0 
     /tmp/cc1zMmI6.s:232    .text:0000000000000160 .L0 
     /tmp/cc1zMmI6.s:233    .text:0000000000000160 .L0 
     /tmp/cc1zMmI6.s:235    .text:0000000000000168 .L0 
     /tmp/cc1zMmI6.s:237    .text:000000000000016c .L0 
     /tmp/cc1zMmI6.s:238    .text:000000000000016c .L0 
     /tmp/cc1zMmI6.s:240    .text:0000000000000170 .L0 
     /tmp/cc1zMmI6.s:242    .text:0000000000000174 .L0 
     /tmp/cc1zMmI6.s:244    .text:0000000000000178 .L0 
     /tmp/cc1zMmI6.s:259    .text:0000000000000178 .L0 
     /tmp/cc1zMmI6.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/cc1zMmI6.s:75     .text:000000000000003c .L0 
     /tmp/cc1zMmI6.s:47     .rodata.str1.8:0000000000000010 .LC1
     /tmp/cc1zMmI6.s:88     .text:0000000000000060 .L0 
     /tmp/cc1zMmI6.s:93     .text:0000000000000070 .L0 
     /tmp/cc1zMmI6.s:99     .text:0000000000000080 .L0 
     /tmp/cc1zMmI6.s:50     .rodata.str1.8:0000000000000028 .LC2
     /tmp/cc1zMmI6.s:106    .text:0000000000000094 .L0 
     /tmp/cc1zMmI6.s:111    .text:00000000000000a4 .L0 
     /tmp/cc1zMmI6.s:53     .rodata.str1.8:0000000000000048 .LC3
     /tmp/cc1zMmI6.s:228    .text:0000000000000150 .L0 
     /tmp/cc1zMmI6.s:163    .text:00000000000000e4 .L4
     /tmp/cc1zMmI6.s:183    .text:0000000000000108 .L5
     /tmp/cc1zMmI6.s:203    .text:000000000000012c .L6
     /tmp/cc1zMmI6.s:223    .text:0000000000000150 .L7
     /tmp/cc1zMmI6.s:2592   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/cc1zMmI6.s:4366   .debug_str:00000000000010e0 .LASF290
     /tmp/cc1zMmI6.s:3974   .debug_str:0000000000000447 .LASF291
     /tmp/cc1zMmI6.s:4198   .debug_str:0000000000000b46 .LASF292
     /tmp/cc1zMmI6.s:5      .text:0000000000000000 .Ltext0
     /tmp/cc1zMmI6.s:247    .text:0000000000000178 .Letext0
     /tmp/cc1zMmI6.s:3826   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/cc1zMmI6.s:4020   .debug_str:0000000000000587 .LASF0
     /tmp/cc1zMmI6.s:4062   .debug_str:00000000000006a4 .LASF1
     /tmp/cc1zMmI6.s:4212   .debug_str:0000000000000bee .LASF2
     /tmp/cc1zMmI6.s:4226   .debug_str:0000000000000c41 .LASF4
     /tmp/cc1zMmI6.s:4034   .debug_str:00000000000005d8 .LASF3
     /tmp/cc1zMmI6.s:3850   .debug_str:00000000000000c3 .LASF5
     /tmp/cc1zMmI6.s:4176   .debug_str:0000000000000a8e .LASF6
     /tmp/cc1zMmI6.s:4164   .debug_str:0000000000000a17 .LASF7
     /tmp/cc1zMmI6.s:4048   .debug_str:0000000000000644 .LASF8
     /tmp/cc1zMmI6.s:3986   .debug_str:0000000000000482 .LASF9
     /tmp/cc1zMmI6.s:3996   .debug_str:00000000000004d1 .LASF10
GAS LISTING /tmp/cc1zMmI6.s 			page 15


     /tmp/cc1zMmI6.s:3906   .debug_str:0000000000000270 .LASF11
     /tmp/cc1zMmI6.s:3970   .debug_str:0000000000000430 .LASF12
     /tmp/cc1zMmI6.s:3928   .debug_str:000000000000030c .LASF13
     /tmp/cc1zMmI6.s:3904   .debug_str:0000000000000260 .LASF14
     /tmp/cc1zMmI6.s:4272   .debug_str:0000000000000db1 .LASF15
     /tmp/cc1zMmI6.s:3954   .debug_str:00000000000003b4 .LASF16
     /tmp/cc1zMmI6.s:4252   .debug_str:0000000000000ce8 .LASF17
     /tmp/cc1zMmI6.s:4088   .debug_str:0000000000000794 .LASF18
     /tmp/cc1zMmI6.s:4130   .debug_str:0000000000000912 .LASF23
     /tmp/cc1zMmI6.s:3944   .debug_str:0000000000000376 .LASF19
     /tmp/cc1zMmI6.s:4182   .debug_str:0000000000000ab4 .LASF21
     /tmp/cc1zMmI6.s:4276   .debug_str:0000000000000dd9 .LASF20
     /tmp/cc1zMmI6.s:4178   .debug_str:0000000000000a95 .LASF22
     /tmp/cc1zMmI6.s:3874   .debug_str:000000000000019f .LASF31
     /tmp/cc1zMmI6.s:3930   .debug_str:000000000000031c .LASF24
     /tmp/cc1zMmI6.s:4408   .debug_str:00000000000012df .LASF25
     /tmp/cc1zMmI6.s:4288   .debug_str:0000000000000e2c .LASF26
     /tmp/cc1zMmI6.s:3892   .debug_str:0000000000000205 .LASF27
     /tmp/cc1zMmI6.s:4270   .debug_str:0000000000000d9b .LASF28
     /tmp/cc1zMmI6.s:3840   .debug_str:000000000000004b .LASF171
     /tmp/cc1zMmI6.s:4340   .debug_str:0000000000001003 .LASF173
     /tmp/cc1zMmI6.s:4250   .debug_str:0000000000000cd5 .LASF105
     /tmp/cc1zMmI6.s:3876   .debug_str:00000000000001a6 .LASF107
     /tmp/cc1zMmI6.s:3956   .debug_str:00000000000003ca .LASF29
     /tmp/cc1zMmI6.s:4064   .debug_str:00000000000006b7 .LASF30
     /tmp/cc1zMmI6.s:4056   .debug_str:000000000000068b .LASF32
     /tmp/cc1zMmI6.s:3908   .debug_str:000000000000027f .LASF33
     /tmp/cc1zMmI6.s:3872   .debug_str:000000000000019a .LASF34
     /tmp/cc1zMmI6.s:4396   .debug_str:0000000000001286 .LASF293
     /tmp/cc1zMmI6.s:3900   .debug_str:000000000000023e .LASF35
     /tmp/cc1zMmI6.s:3888   .debug_str:00000000000001ee .LASF36
     /tmp/cc1zMmI6.s:3832   .debug_str:0000000000000021 .LASF37
     /tmp/cc1zMmI6.s:3990   .debug_str:00000000000004a8 .LASF38
     /tmp/cc1zMmI6.s:4282   .debug_str:0000000000000e06 .LASF274
     /tmp/cc1zMmI6.s:4280   .debug_str:0000000000000df0 .LASF294
     /tmp/cc1zMmI6.s:4144   .debug_str:0000000000000999 .LASF295
     /tmp/cc1zMmI6.s:4068   .debug_str:00000000000006db .LASF83
     /tmp/cc1zMmI6.s:4214   .debug_str:0000000000000bfc .LASF39
     /tmp/cc1zMmI6.s:3896   .debug_str:000000000000021a .LASF43
     /tmp/cc1zMmI6.s:4090   .debug_str:0000000000000799 .LASF40
     /tmp/cc1zMmI6.s:3988   .debug_str:0000000000000492 .LASF41
     /tmp/cc1zMmI6.s:4336   .debug_str:0000000000000fec .LASF42
     /tmp/cc1zMmI6.s:4238   .debug_str:0000000000000c8a .LASF44
     /tmp/cc1zMmI6.s:4194   .debug_str:0000000000000b30 .LASF45
     /tmp/cc1zMmI6.s:4188   .debug_str:0000000000000aee .LASF46
     /tmp/cc1zMmI6.s:4284   .debug_str:0000000000000e0e .LASF47
     /tmp/cc1zMmI6.s:4114   .debug_str:0000000000000881 .LASF48
     /tmp/cc1zMmI6.s:3884   .debug_str:00000000000001d2 .LASF49
     /tmp/cc1zMmI6.s:4350   .debug_str:000000000000106b .LASF50
     /tmp/cc1zMmI6.s:4092   .debug_str:00000000000007a4 .LASF51
     /tmp/cc1zMmI6.s:4106   .debug_str:000000000000083f .LASF52
     /tmp/cc1zMmI6.s:4012   .debug_str:000000000000054f .LASF53
     /tmp/cc1zMmI6.s:4320   .debug_str:0000000000000f63 .LASF54
     /tmp/cc1zMmI6.s:4070   .debug_str:00000000000006e2 .LASF55
     /tmp/cc1zMmI6.s:4342   .debug_str:000000000000101a .LASF56
     /tmp/cc1zMmI6.s:4384   .debug_str:0000000000001208 .LASF57
     /tmp/cc1zMmI6.s:4418   .debug_str:000000000000132e .LASF58
GAS LISTING /tmp/cc1zMmI6.s 			page 16


     /tmp/cc1zMmI6.s:3940   .debug_str:000000000000035e .LASF59
     /tmp/cc1zMmI6.s:4172   .debug_str:0000000000000a61 .LASF60
     /tmp/cc1zMmI6.s:4058   .debug_str:0000000000000690 .LASF61
     /tmp/cc1zMmI6.s:3950   .debug_str:000000000000038e .LASF62
     /tmp/cc1zMmI6.s:4084   .debug_str:0000000000000773 .LASF63
     /tmp/cc1zMmI6.s:4414   .debug_str:0000000000001313 .LASF64
     /tmp/cc1zMmI6.s:4054   .debug_str:0000000000000684 .LASF65
     /tmp/cc1zMmI6.s:4186   .debug_str:0000000000000adc .LASF66
     /tmp/cc1zMmI6.s:3886   .debug_str:00000000000001de .LASF67
     /tmp/cc1zMmI6.s:4254   .debug_str:0000000000000cfe .LASF68
     /tmp/cc1zMmI6.s:4420   .debug_str:0000000000001349 .LASF69
     /tmp/cc1zMmI6.s:4080   .debug_str:0000000000000750 .LASF70
     /tmp/cc1zMmI6.s:3972   .debug_str:000000000000043f .LASF71
     /tmp/cc1zMmI6.s:4262   .debug_str:0000000000000d46 .LASF72
     /tmp/cc1zMmI6.s:4298   .debug_str:0000000000000e9a .LASF73
     /tmp/cc1zMmI6.s:3834   .debug_str:0000000000000029 .LASF74
     /tmp/cc1zMmI6.s:4310   .debug_str:0000000000000f0f .LASF75
     /tmp/cc1zMmI6.s:4344   .debug_str:0000000000001033 .LASF76
     /tmp/cc1zMmI6.s:4066   .debug_str:00000000000006d5 .LASF77
     /tmp/cc1zMmI6.s:4314   .debug_str:0000000000000f40 .LASF79
     /tmp/cc1zMmI6.s:3942   .debug_str:000000000000036d .LASF78
     /tmp/cc1zMmI6.s:3914   .debug_str:000000000000029e .LASF80
     /tmp/cc1zMmI6.s:4246   .debug_str:0000000000000cbe .LASF81
     /tmp/cc1zMmI6.s:4044   .debug_str:0000000000000624 .LASF82
     /tmp/cc1zMmI6.s:4306   .debug_str:0000000000000ef7 .LASF84
     /tmp/cc1zMmI6.s:4228   .debug_str:0000000000000c48 .LASF85
     /tmp/cc1zMmI6.s:3846   .debug_str:000000000000009f .LASF86
     /tmp/cc1zMmI6.s:3838   .debug_str:0000000000000046 .LASF87
     /tmp/cc1zMmI6.s:4404   .debug_str:00000000000012c2 .LASF88
     /tmp/cc1zMmI6.s:4364   .debug_str:00000000000010d4 .LASF89
     /tmp/cc1zMmI6.s:3936   .debug_str:0000000000000341 .LASF90
     /tmp/cc1zMmI6.s:4322   .debug_str:0000000000000f75 .LASF91
     /tmp/cc1zMmI6.s:4318   .debug_str:0000000000000f59 .LASF92
     /tmp/cc1zMmI6.s:4352   .debug_str:0000000000001082 .LASF93
     /tmp/cc1zMmI6.s:4224   .debug_str:0000000000000c33 .LASF94
     /tmp/cc1zMmI6.s:4024   .debug_str:000000000000059c .LASF95
     /tmp/cc1zMmI6.s:4204   .debug_str:0000000000000bcb .LASF96
     /tmp/cc1zMmI6.s:4220   .debug_str:0000000000000c27 .LASF97
     /tmp/cc1zMmI6.s:3964   .debug_str:0000000000000417 .LASF98
     /tmp/cc1zMmI6.s:3890   .debug_str:00000000000001f7 .LASF99
     /tmp/cc1zMmI6.s:4072   .debug_str:00000000000006ef .LASF101
     /tmp/cc1zMmI6.s:4338   .debug_str:0000000000000ff4 .LASF100
     /tmp/cc1zMmI6.s:4376   .debug_str:00000000000011c1 .LASF102
     /tmp/cc1zMmI6.s:4132   .debug_str:0000000000000918 .LASF103
     /tmp/cc1zMmI6.s:4290   .debug_str:0000000000000e42 .LASF104
     /tmp/cc1zMmI6.s:3932   .debug_str:0000000000000329 .LASF106
     /tmp/cc1zMmI6.s:3844   .debug_str:0000000000000077 .LASF108
     /tmp/cc1zMmI6.s:4236   .debug_str:0000000000000c79 .LASF164
     /tmp/cc1zMmI6.s:3998   .debug_str:00000000000004df .LASF109
     /tmp/cc1zMmI6.s:4134   .debug_str:0000000000000928 .LASF112
     /tmp/cc1zMmI6.s:3866   .debug_str:0000000000000163 .LASF110
     /tmp/cc1zMmI6.s:3934   .debug_str:0000000000000337 .LASF111
     /tmp/cc1zMmI6.s:4184   .debug_str:0000000000000ac5 .LASF113
     /tmp/cc1zMmI6.s:4316   .debug_str:0000000000000f50 .LASF114
     /tmp/cc1zMmI6.s:3854   .debug_str:00000000000000e5 .LASF115
     /tmp/cc1zMmI6.s:4206   .debug_str:0000000000000bd1 .LASF116
     /tmp/cc1zMmI6.s:4138   .debug_str:0000000000000951 .LASF117
GAS LISTING /tmp/cc1zMmI6.s 			page 17


     /tmp/cc1zMmI6.s:4082   .debug_str:000000000000076b .LASF118
     /tmp/cc1zMmI6.s:4104   .debug_str:0000000000000819 .LASF119
     /tmp/cc1zMmI6.s:4154   .debug_str:00000000000009d2 .LASF120
     /tmp/cc1zMmI6.s:4042   .debug_str:0000000000000605 .LASF121
     /tmp/cc1zMmI6.s:4152   .debug_str:00000000000009c9 .LASF122
     /tmp/cc1zMmI6.s:3852   .debug_str:00000000000000ca .LASF123
     /tmp/cc1zMmI6.s:4240   .debug_str:0000000000000c9d .LASF124
     /tmp/cc1zMmI6.s:4304   .debug_str:0000000000000ed9 .LASF125
     /tmp/cc1zMmI6.s:4422   .debug_str:0000000000001358 .LASF126
     /tmp/cc1zMmI6.s:4050   .debug_str:0000000000000657 .LASF127
     /tmp/cc1zMmI6.s:4222   .debug_str:0000000000000c2c .LASF128
     /tmp/cc1zMmI6.s:4268   .debug_str:0000000000000d82 .LASF129
     /tmp/cc1zMmI6.s:3910   .debug_str:0000000000000284 .LASF130
     /tmp/cc1zMmI6.s:4398   .debug_str:000000000000128d .LASF131
     /tmp/cc1zMmI6.s:3870   .debug_str:0000000000000193 .LASF132
     /tmp/cc1zMmI6.s:4140   .debug_str:0000000000000978 .LASF133
     /tmp/cc1zMmI6.s:4416   .debug_str:0000000000001327 .LASF134
     /tmp/cc1zMmI6.s:3916   .debug_str:00000000000002b1 .LASF135
     /tmp/cc1zMmI6.s:4022   .debug_str:0000000000000594 .LASF136
     /tmp/cc1zMmI6.s:4390   .debug_str:000000000000124b .LASF137
     /tmp/cc1zMmI6.s:3948   .debug_str:0000000000000386 .LASF138
     /tmp/cc1zMmI6.s:4074   .debug_str:0000000000000708 .LASF139
     /tmp/cc1zMmI6.s:3966   .debug_str:0000000000000423 .LASF140
     /tmp/cc1zMmI6.s:4078   .debug_str:0000000000000736 .LASF141
     /tmp/cc1zMmI6.s:4148   .debug_str:00000000000009af .LASF142
     /tmp/cc1zMmI6.s:4410   .debug_str:00000000000012ec .LASF143
     /tmp/cc1zMmI6.s:4354   .debug_str:0000000000001089 .LASF144
     /tmp/cc1zMmI6.s:4116   .debug_str:0000000000000898 .LASF145
     /tmp/cc1zMmI6.s:4110   .debug_str:000000000000085c .LASF146
     /tmp/cc1zMmI6.s:4302   .debug_str:0000000000000ea9 .LASF147
     /tmp/cc1zMmI6.s:4156   .debug_str:00000000000009de .LASF148
     /tmp/cc1zMmI6.s:4076   .debug_str:0000000000000722 .LASF149
     /tmp/cc1zMmI6.s:3968   .debug_str:000000000000042b .LASF150
     /tmp/cc1zMmI6.s:4120   .debug_str:00000000000008cf .LASF151
     /tmp/cc1zMmI6.s:4032   .debug_str:00000000000005d3 .LASF152
     /tmp/cc1zMmI6.s:4060   .debug_str:000000000000069f .LASF153
     /tmp/cc1zMmI6.s:4260   .debug_str:0000000000000d36 .LASF154
     /tmp/cc1zMmI6.s:4094   .debug_str:00000000000007ab .LASF155
     /tmp/cc1zMmI6.s:4274   .debug_str:0000000000000dbd .LASF156
     /tmp/cc1zMmI6.s:4386   .debug_str:0000000000001217 .LASF157
     /tmp/cc1zMmI6.s:4232   .debug_str:0000000000000c61 .LASF158
     /tmp/cc1zMmI6.s:4362   .debug_str:00000000000010bb .LASF159
     /tmp/cc1zMmI6.s:4018   .debug_str:0000000000000581 .LASF160
     /tmp/cc1zMmI6.s:4374   .debug_str:00000000000011a4 .LASF161
     /tmp/cc1zMmI6.s:4402   .debug_str:00000000000012ba .LASF162
     /tmp/cc1zMmI6.s:4008   .debug_str:000000000000052a .LASF163
     /tmp/cc1zMmI6.s:4286   .debug_str:0000000000000e19 .LASF165
     /tmp/cc1zMmI6.s:4358   .debug_str:00000000000010a3 .LASF166
     /tmp/cc1zMmI6.s:4030   .debug_str:00000000000005c1 .LASF167
     /tmp/cc1zMmI6.s:3992   .debug_str:00000000000004ad .LASF168
     /tmp/cc1zMmI6.s:4346   .debug_str:0000000000001053 .LASF169
     /tmp/cc1zMmI6.s:4296   .debug_str:0000000000000e7c .LASF170
     /tmp/cc1zMmI6.s:4006   .debug_str:000000000000051f .LASF172
     /tmp/cc1zMmI6.s:4086   .debug_str:000000000000077c .LASF174
     /tmp/cc1zMmI6.s:4394   .debug_str:0000000000001277 .LASF175
     /tmp/cc1zMmI6.s:3902   .debug_str:0000000000000244 .LASF176
     /tmp/cc1zMmI6.s:4292   .debug_str:0000000000000e5d .LASF177
GAS LISTING /tmp/cc1zMmI6.s 			page 18


     /tmp/cc1zMmI6.s:3842   .debug_str:000000000000005b .LASF178
     /tmp/cc1zMmI6.s:4200   .debug_str:0000000000000ba7 .LASF181
     /tmp/cc1zMmI6.s:4328   .debug_str:0000000000000fa4 .LASF183
     /tmp/cc1zMmI6.s:3878   .debug_str:00000000000001bd .LASF179
     /tmp/cc1zMmI6.s:4122   .debug_str:00000000000008d4 .LASF180
     /tmp/cc1zMmI6.s:4382   .debug_str:0000000000001202 .LASF182
     /tmp/cc1zMmI6.s:4360   .debug_str:00000000000010a9 .LASF184
     /tmp/cc1zMmI6.s:3994   .debug_str:00000000000004cc .LASF185
     /tmp/cc1zMmI6.s:4162   .debug_str:0000000000000a06 .LASF186
     /tmp/cc1zMmI6.s:4128   .debug_str:000000000000090d .LASF187
     /tmp/cc1zMmI6.s:4146   .debug_str:000000000000099e .LASF188
     /tmp/cc1zMmI6.s:4038   .debug_str:00000000000005fb .LASF189
     /tmp/cc1zMmI6.s:4098   .debug_str:00000000000007e5 .LASF190
     /tmp/cc1zMmI6.s:4368   .debug_str:0000000000001182 .LASF191
     /tmp/cc1zMmI6.s:4036   .debug_str:00000000000005ea .LASF192
     /tmp/cc1zMmI6.s:4040   .debug_str:0000000000000600 .LASF193
     /tmp/cc1zMmI6.s:4158   .debug_str:00000000000009ea .LASF194
     /tmp/cc1zMmI6.s:4370   .debug_str:0000000000001187 .LASF195
     /tmp/cc1zMmI6.s:3938   .debug_str:000000000000034d .LASF196
     /tmp/cc1zMmI6.s:3882   .debug_str:00000000000001cd .LASF197
     /tmp/cc1zMmI6.s:4046   .debug_str:0000000000000633 .LASF198
     /tmp/cc1zMmI6.s:4334   .debug_str:0000000000000fe3 .LASF199
     /tmp/cc1zMmI6.s:4324   .debug_str:0000000000000f7d .LASF200
     /tmp/cc1zMmI6.s:4208   .debug_str:0000000000000bda .LASF201
     /tmp/cc1zMmI6.s:4136   .debug_str:000000000000093c .LASF202
     /tmp/cc1zMmI6.s:4348   .debug_str:0000000000001064 .LASF203
     /tmp/cc1zMmI6.s:4174   .debug_str:0000000000000a7b .LASF204
     /tmp/cc1zMmI6.s:4124   .debug_str:00000000000008e5 .LASF205
     /tmp/cc1zMmI6.s:4052   .debug_str:0000000000000671 .LASF206
     /tmp/cc1zMmI6.s:4380   .debug_str:00000000000011fa .LASF207
     /tmp/cc1zMmI6.s:4230   .debug_str:0000000000000c4d .LASF208
     /tmp/cc1zMmI6.s:4118   .debug_str:00000000000008c7 .LASF209
     /tmp/cc1zMmI6.s:3976   .debug_str:0000000000000454 .LASF210
     /tmp/cc1zMmI6.s:4142   .debug_str:0000000000000991 .LASF211
     /tmp/cc1zMmI6.s:4192   .debug_str:0000000000000b1c .LASF212
     /tmp/cc1zMmI6.s:4256   .debug_str:0000000000000d1a .LASF213
     /tmp/cc1zMmI6.s:4028   .debug_str:00000000000005ad .LASF214
     /tmp/cc1zMmI6.s:4266   .debug_str:0000000000000d7b .LASF215
     /tmp/cc1zMmI6.s:3924   .debug_str:00000000000002f3 .LASF216
     /tmp/cc1zMmI6.s:4234   .debug_str:0000000000000c72 .LASF217
     /tmp/cc1zMmI6.s:3912   .debug_str:000000000000028b .LASF218
     /tmp/cc1zMmI6.s:3918   .debug_str:00000000000002ca .LASF219
     /tmp/cc1zMmI6.s:4016   .debug_str:000000000000056f .LASF220
     /tmp/cc1zMmI6.s:4026   .debug_str:00000000000005a7 .LASF221
     /tmp/cc1zMmI6.s:4002   .debug_str:00000000000004f9 .LASF222
     /tmp/cc1zMmI6.s:3828   .debug_str:0000000000000000 .LASF223
     /tmp/cc1zMmI6.s:4216   .debug_str:0000000000000c06 .LASF224
     /tmp/cc1zMmI6.s:4210   .debug_str:0000000000000be3 .LASF225
     /tmp/cc1zMmI6.s:4406   .debug_str:00000000000012c7 .LASF226
     /tmp/cc1zMmI6.s:4300   .debug_str:0000000000000e9f .LASF227
     /tmp/cc1zMmI6.s:4388   .debug_str:0000000000001235 .LASF228
     /tmp/cc1zMmI6.s:4356   .debug_str:0000000000001099 .LASF229
     /tmp/cc1zMmI6.s:4100   .debug_str:00000000000007f6 .LASF230
     /tmp/cc1zMmI6.s:4000   .debug_str:00000000000004ea .LASF231
     /tmp/cc1zMmI6.s:3862   .debug_str:000000000000013d .LASF232
     /tmp/cc1zMmI6.s:4166   .debug_str:0000000000000a2a .LASF233
     /tmp/cc1zMmI6.s:3958   .debug_str:00000000000003d5 .LASF234
GAS LISTING /tmp/cc1zMmI6.s 			page 19


     /tmp/cc1zMmI6.s:3898   .debug_str:000000000000022f .LASF235
     /tmp/cc1zMmI6.s:4096   .debug_str:00000000000007c4 .LASF236
     /tmp/cc1zMmI6.s:3962   .debug_str:0000000000000412 .LASF237
     /tmp/cc1zMmI6.s:3960   .debug_str:00000000000003f7 .LASF238
     /tmp/cc1zMmI6.s:3952   .debug_str:00000000000003a8 .LASF239
     /tmp/cc1zMmI6.s:4264   .debug_str:0000000000000d58 .LASF240
     /tmp/cc1zMmI6.s:4150   .debug_str:00000000000009b9 .LASF241
     /tmp/cc1zMmI6.s:4372   .debug_str:000000000000118c .LASF242
     /tmp/cc1zMmI6.s:3848   .debug_str:00000000000000ab .LASF243
     /tmp/cc1zMmI6.s:4218   .debug_str:0000000000000c1e .LASF244
     /tmp/cc1zMmI6.s:4248   .debug_str:0000000000000cc3 .LASF245
     /tmp/cc1zMmI6.s:3984   .debug_str:0000000000000478 .LASF246
     /tmp/cc1zMmI6.s:4400   .debug_str:00000000000012a6 .LASF296
     /tmp/cc1zMmI6.s:4014   .debug_str:0000000000000557 .LASF254
     /tmp/cc1zMmI6.s:4332   .debug_str:0000000000000fc6 .LASF247
     /tmp/cc1zMmI6.s:3946   .debug_str:000000000000037b .LASF248
     /tmp/cc1zMmI6.s:4326   .debug_str:0000000000000f92 .LASF249
     /tmp/cc1zMmI6.s:4392   .debug_str:0000000000001265 .LASF250
     /tmp/cc1zMmI6.s:4244   .debug_str:0000000000000cad .LASF251
     /tmp/cc1zMmI6.s:4294   .debug_str:0000000000000e6c .LASF252
     /tmp/cc1zMmI6.s:4312   .debug_str:0000000000000f1c .LASF253
     /tmp/cc1zMmI6.s:4202   .debug_str:0000000000000bac .LASF255
     /tmp/cc1zMmI6.s:3856   .debug_str:0000000000000101 .LASF256
     /tmp/cc1zMmI6.s:4330   .debug_str:0000000000000fb5 .LASF257
     /tmp/cc1zMmI6.s:4170   .debug_str:0000000000000a48 .LASF258
     /tmp/cc1zMmI6.s:3868   .debug_str:000000000000017a .LASF259
     /tmp/cc1zMmI6.s:4190   .debug_str:0000000000000b01 .LASF297
     /tmp/cc1zMmI6.s:4278   .debug_str:0000000000000de0 .LASF260
     /tmp/cc1zMmI6.s:4308   .debug_str:0000000000000eff .LASF261
     /tmp/cc1zMmI6.s:3836   .debug_str:0000000000000038 .LASF262
     /tmp/cc1zMmI6.s:4160   .debug_str:00000000000009fb .LASF263
     /tmp/cc1zMmI6.s:3858   .debug_str:000000000000011f .LASF264
     /tmp/cc1zMmI6.s:4126   .debug_str:00000000000008ec .LASF265
     /tmp/cc1zMmI6.s:4378   .debug_str:00000000000011db .LASF266
     /tmp/cc1zMmI6.s:4180   .debug_str:0000000000000aa8 .LASF267
     /tmp/cc1zMmI6.s:4258   .debug_str:0000000000000d22 .LASF268
     /tmp/cc1zMmI6.s:4004   .debug_str:000000000000050b .LASF269
     /tmp/cc1zMmI6.s:3830   .debug_str:000000000000000b .LASF270
     /tmp/cc1zMmI6.s:3880   .debug_str:00000000000001c2 .LASF271
     /tmp/cc1zMmI6.s:3980   .debug_str:000000000000046d .LASF272
     /tmp/cc1zMmI6.s:60     .text:0000000000000028 .LFB94
     /tmp/cc1zMmI6.s:245    .text:0000000000000178 .LFE94
     /tmp/cc1zMmI6.s:3761   .debug_loc:0000000000000000 .LLST1
     /tmp/cc1zMmI6.s:4010   .debug_str:0000000000000549 .LASF273
     /tmp/cc1zMmI6.s:3768   .debug_loc:0000000000000023 .LLST2
     /tmp/cc1zMmI6.s:3860   .debug_str:000000000000012d .LASF275
     /tmp/cc1zMmI6.s:3920   .debug_str:00000000000002d0 .LASF276
     /tmp/cc1zMmI6.s:4108   .debug_str:0000000000000851 .LASF277
     /tmp/cc1zMmI6.s:3864   .debug_str:0000000000000159 .LASF278
     /tmp/cc1zMmI6.s:3922   .debug_str:00000000000002da .LASF280
     /tmp/cc1zMmI6.s:3978   .debug_str:0000000000000468 .LASF279
     /tmp/cc1zMmI6.s:4242   .debug_str:0000000000000ca8 .LASF281
     /tmp/cc1zMmI6.s:9      .text:0000000000000000 .LFB96
     /tmp/cc1zMmI6.s:40     .text:0000000000000028 .LFE96
     /tmp/cc1zMmI6.s:22     .text:0000000000000010 .LBB18
     /tmp/cc1zMmI6.s:29     .text:0000000000000018 .LBE18
     /tmp/cc1zMmI6.s:3775   .debug_loc:0000000000000046 .LLST0
GAS LISTING /tmp/cc1zMmI6.s 			page 20


     /tmp/cc1zMmI6.s:27     .text:0000000000000018 .LVL1
     /tmp/cc1zMmI6.s:113    .text:00000000000000ac .LBB20
     /tmp/cc1zMmI6.s:125    .text:00000000000000b0 .LBE20
     /tmp/cc1zMmI6.s:132    .text:00000000000000bc .LBB22
     /tmp/cc1zMmI6.s:143    .text:00000000000000c0 .LBE22
     /tmp/cc1zMmI6.s:155    .text:00000000000000d8 .LBB24
     /tmp/cc1zMmI6.s:165    .text:00000000000000e4 .LBE24
     /tmp/cc1zMmI6.s:3785   .debug_loc:000000000000006c .LLST3
     /tmp/cc1zMmI6.s:162    .text:00000000000000e4 .LVL16
     /tmp/cc1zMmI6.s:176    .text:00000000000000fc .LBB26
     /tmp/cc1zMmI6.s:185    .text:0000000000000108 .LBE26
     /tmp/cc1zMmI6.s:3792   .debug_loc:000000000000008f .LLST4
     /tmp/cc1zMmI6.s:182    .text:0000000000000108 .LVL19
     /tmp/cc1zMmI6.s:196    .text:0000000000000120 .LBB28
     /tmp/cc1zMmI6.s:205    .text:000000000000012c .LBE28
     /tmp/cc1zMmI6.s:3799   .debug_loc:00000000000000b2 .LLST5
     /tmp/cc1zMmI6.s:202    .text:000000000000012c .LVL22
     /tmp/cc1zMmI6.s:216    .text:0000000000000144 .LBB30
     /tmp/cc1zMmI6.s:225    .text:0000000000000150 .LBE30
     /tmp/cc1zMmI6.s:3806   .debug_loc:00000000000000d5 .LLST6
     /tmp/cc1zMmI6.s:222    .text:0000000000000150 .LVL25
     /tmp/cc1zMmI6.s:77     .text:000000000000004c .LVL2
     /tmp/cc1zMmI6.s:83     .text:000000000000005c .LVL3
     /tmp/cc1zMmI6.s:90     .text:0000000000000070 .LVL5
     /tmp/cc1zMmI6.s:101    .text:0000000000000090 .LVL7
     /tmp/cc1zMmI6.s:108    .text:00000000000000a4 .LVL9
     /tmp/cc1zMmI6.s:130    .text:00000000000000bc .LVL12
     /tmp/cc1zMmI6.s:147    .text:00000000000000c8 .LVL13
     /tmp/cc1zMmI6.s:154    .text:00000000000000d8 .LVL15
     /tmp/cc1zMmI6.s:169    .text:00000000000000ec .LVL17
     /tmp/cc1zMmI6.s:175    .text:00000000000000fc .LVL18
     /tmp/cc1zMmI6.s:189    .text:0000000000000110 .LVL20
     /tmp/cc1zMmI6.s:195    .text:0000000000000120 .LVL21
     /tmp/cc1zMmI6.s:209    .text:0000000000000134 .LVL23
     /tmp/cc1zMmI6.s:215    .text:0000000000000144 .LVL24
     /tmp/cc1zMmI6.s:230    .text:0000000000000160 .LVL26
     /tmp/cc1zMmI6.s:3982   .debug_str:0000000000000472 .LASF282
     /tmp/cc1zMmI6.s:3894   .debug_str:0000000000000215 .LASF283
     /tmp/cc1zMmI6.s:4102   .debug_str:000000000000080c .LASF284
     /tmp/cc1zMmI6.s:4168   .debug_str:0000000000000a3f .LASF286
     /tmp/cc1zMmI6.s:4412   .debug_str:0000000000001308 .LASF285
     /tmp/cc1zMmI6.s:3926   .debug_str:0000000000000306 .LASF287
     /tmp/cc1zMmI6.s:4112   .debug_str:000000000000086d .LASF288
     /tmp/cc1zMmI6.s:4196   .debug_str:0000000000000b39 .LASF289
     /tmp/cc1zMmI6.s:85     .text:0000000000000060 .LVL4
     /tmp/cc1zMmI6.s:103    .text:0000000000000094 .LVL8
     /tmp/cc1zMmI6.s:151    .text:00000000000000d0 .LVL14
     /tmp/cc1zMmI6.s:21     .text:0000000000000010 .LVL0
     /tmp/cc1zMmI6.s:260    .debug_info:0000000000000000 .Ldebug_info0

UNDEFINED SYMBOLS
_Z8userMainv
_Z12kprintStringPKc
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB7runningE
_ZN5Riscv14supervisorTrapEv
_ZN3TCB4joinEv
GAS LISTING /tmp/cc1zMmI6.s 			page 21


_ZN15ThreadCollector11getInstanceEv
_ZN15ThreadCollectorD1Ev
_Z5kfreePv
_ZN10IdleThread11getInstanceEv
_ZN10IdleThreadD1Ev
_ZN14TimerInterrupt11getInstanceEv
_ZN14TimerInterruptD1Ev
_ZN9Scheduler11getInstanceEv
_ZN9SchedulerD1Ev
